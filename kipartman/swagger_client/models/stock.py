# coding: utf-8

"""
    Kipartman

    Kipartman api specifications

    OpenAPI spec version: 1.0.0
    Contact: --
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Stock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'PartId',
        'storage': 'PartStorage',
        'amount': 'int',
        'reason': 'str'
    }

    attribute_map = {
        'part_id': 'part_id',
        'storage': 'storage',
        'amount': 'amount',
        'reason': 'reason'
    }

    def __init__(self, part_id=None, storage=None, amount=None, reason=None):
        """
        Stock - a model defined in Swagger
        """

        self._part_id = None
        self._storage = None
        self._amount = None
        self._reason = None

        if part_id is not None:
          self.part_id = part_id
        if storage is not None:
          self.storage = storage
        if amount is not None:
          self.amount = amount
        if reason is not None:
          self.reason = reason

    @property
    def part_id(self):
        """
        Gets the part_id of this Stock.

        :return: The part_id of this Stock.
        :rtype: PartId
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """
        Sets the part_id of this Stock.

        :param part_id: The part_id of this Stock.
        :type: PartId
        """

        self._part_id = part_id

    @property
    def storage(self):
        """
        Gets the storage of this Stock.

        :return: The storage of this Stock.
        :rtype: PartStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this Stock.

        :param storage: The storage of this Stock.
        :type: PartStorage
        """

        self._storage = storage

    @property
    def amount(self):
        """
        Gets the amount of this Stock.

        :return: The amount of this Stock.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Stock.

        :param amount: The amount of this Stock.
        :type: int
        """

        self._amount = amount

    @property
    def reason(self):
        """
        Gets the reason of this Stock.

        :return: The reason of this Stock.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Stock.

        :param reason: The reason of this Stock.
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Stock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
