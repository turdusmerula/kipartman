# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.part_id import PartId
from swagger_server.models.part_storage import PartStorage
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Stock(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, part_id=None, storage=None, amount=None, reason=None):
        """
        Stock - a model defined in Swagger

        :param part_id: The part_id of this Stock.
        :type part_id: PartId
        :param storage: The storage of this Stock.
        :type storage: PartStorage
        :param amount: The amount of this Stock.
        :type amount: int
        :param reason: The reason of this Stock.
        :type reason: str
        """
        self.swagger_types = {
            'part_id': PartId,
            'storage': PartStorage,
            'amount': int,
            'reason': str
        }

        self.attribute_map = {
            'part_id': 'part_id',
            'storage': 'storage',
            'amount': 'amount',
            'reason': 'reason'
        }

        self._part_id = part_id
        self._storage = storage
        self._amount = amount
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The stock of this Stock.
        :rtype: Stock
        """
        return deserialize_model(dikt, cls)

    @property
    def part_id(self):
        """
        Gets the part_id of this Stock.

        :return: The part_id of this Stock.
        :rtype: PartId
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """
        Sets the part_id of this Stock.

        :param part_id: The part_id of this Stock.
        :type part_id: PartId
        """

        self._part_id = part_id

    @property
    def storage(self):
        """
        Gets the storage of this Stock.

        :return: The storage of this Stock.
        :rtype: PartStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this Stock.

        :param storage: The storage of this Stock.
        :type storage: PartStorage
        """

        self._storage = storage

    @property
    def amount(self):
        """
        Gets the amount of this Stock.

        :return: The amount of this Stock.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Stock.

        :param amount: The amount of this Stock.
        :type amount: int
        """

        self._amount = amount

    @property
    def reason(self):
        """
        Gets the reason of this Stock.

        :return: The reason of this Stock.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this Stock.

        :param reason: The reason of this Stock.
        :type reason: str
        """

        self._reason = reason

